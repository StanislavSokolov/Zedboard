/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xuartps.h"
#include "xadcps.h"

#define LED 0x01   /* Assumes bit 0 of GPIO is connected to an LED  */

/*
 * The following constant is used to wait after an LED is turned on to make
 * sure that it is visible to the human eye.  This constant might need to be
 * tuned for faster or slower processor speeds.
 */
#define LED_DELAY     10000000

/*
 * The following constant is used to determine which channel of the GPIO is
 * used for the LED if there are 2 channels supported.
 */
#define LED_CHANNEL 1

u32 TestINdigital(XGpio * Gpio);
int checkbit(const int value, const int position);
//u32 TestINanalog(u32 Channel);
//int UartPsHelloWorldExample(u16 DeviceId);
//u32 AXI_BUS_READ(u32 BASEADDR, u32 Channel);
//void AXI_BUS_WRITE(u32 BASEADDR, u32 Channel, u32 Data);
//int XAdcInit(u16 XAdcDeviceId);

XGpio Gpio_1;
XGpio Gpio_0;
//XAdcPs XAdcInst;
//XUartPs UART_0;





int main()
{
    init_platform();

    print("Hello World\n\r");


    int Status;

    	Status = XGpio_Initialize(&Gpio_1, XPAR_AXI_GPIO_1_DEVICE_ID);
    		if (Status != XST_SUCCESS) {
    			xil_printf("Gpio_1 Initialization Failed\r\n");
    			return XST_FAILURE;
    		}

        	Status = XGpio_Initialize(&Gpio_0, XPAR_AXI_GPIO_0_DEVICE_ID);
        		if (Status != XST_SUCCESS) {
        			xil_printf("Gpio_0 Initialization Failed\r\n");
        			return XST_FAILURE;
        		}

//    	Status = XGpio_Initialize(&Gpio_0, XPAR_AXI_GPIO_0_DEVICE_ID);
//    		if (Status != XST_SUCCESS) {
//    			xil_printf("Gpio_2 Initialization Failed\r\n");
//    			return XST_FAILURE;
//    		}
//
//    	Status = UartPsHelloWorldExample(XPAR_PS7_UART_0_DEVICE_ID);
//    		if (Status == XST_FAILURE) {
//    			xil_printf("Uartps hello world Example Failed\r\n");
//    			return XST_FAILURE;
//    		}
//    		int	Delay = 0;


    		volatile int Delay;
			int x = 0;
			while (x < 8) {

				/* Set the LED to High */
				XGpio_DiscreteWrite(&Gpio_0, LED_CHANNEL, 255<<x);

				/* Wait a small amount of time so the LED is visible */
				for (Delay = 0; Delay < LED_DELAY; Delay++);

				/* Clear the LED bit */
				XGpio_DiscreteClear(&Gpio_0, LED_CHANNEL, 255<x);

				/* Wait a small amount of time so the LED is visible */
				for (Delay = 0; Delay < LED_DELAY; Delay++);
				x++;
			}

			xil_printf("Successfully ran Gpio Example\r\n");




    		int yy;
    		for (int x; x < 1000; x++) {
    			for (int y = 0; y < 1000; y++) {
    				yy++;
    				if (yy == 999) {
    					TestINdigital(&Gpio_1);
    				}

    			}
    		}




    		int a = 12;
    		xil_printf("%d << 1 == %d\n", a, a << 1);
    		xil_printf("%d << 2 == %d\n", a, a << 2);
    		xil_printf("%d >> 1 == %d\n", a, a >> 1);
    		xil_printf("%d >> 2 == %d\n", a, a >> 2);





    cleanup_platform();
    return 0;
}

int checkbit(const int value, const int position) {
    return ((value & (1 << position)) != 0);
}
